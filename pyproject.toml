[project]
name = "promptevolve"
version = "0.1.0"
description = "Self-Improving Prompt Engineering Agent using R-Zero Co-Evolutionary Principles"
authors = [
    {name = "Abraham J Pathil", email = "abraham@example.com"}
]
readme = "docs/README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["prompt-engineering", "llm", "ai", "optimization", "evolutionary-algorithms"]

dependencies = [
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "openai>=1.0.0",
    "python-json-logger>=2.0.0",
    "google-generativeai>=0.8.5",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]

analysis = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
]

all = [
    "promptevolve[dev,analysis]",
]

[project.urls]
Homepage = "https://github.com/AbrahamJPathil/LLM-Architecture"
Repository = "https://github.com/AbrahamJPathil/LLM-Architecture"
Documentation = "https://github.com/AbrahamJPathil/LLM-Architecture/blob/project-PromptEvolve/docs/README.md"

[project.scripts]
promptevolve = "promptevolve.prompt_evolution:main"
promptevolve-datagen = "promptevolve.data_generator:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/promptevolve"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --cov=src/promptevolve --cov-report=html --cov-report=term"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true

[tool.coverage.run]
source = ["src/promptevolve"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
